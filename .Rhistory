plot(list[[1]])
#dev.off()
library(data.tree)
mareix <- read.table("Downloads/datalevel4.txt")
mareix <- mareix[order(mareix[,1],decreasing=F),]
totalNumber <- nrow(mareix)
leavesNumber <- 0
for(i in 1:totalNumber) {
if (mareix[i,2] < 0) {
leavesNumber <- leavesNumber + 1
}
}
level <- log2(leavesNumber)
list <- list(Node$new(paste0("X",mareix[1,2]," < ",mareix[1,3])))
for (j in 2:(totalNumber-leavesNumber)) {
list[[j]] <- Node$new(paste0("X",mareix[j,2]," < ",mareix[j,3]))
}
for (k in (totalNumber-leavesNumber+1):totalNumber) {
list[[k]] <- Node$new(mareix[k,3])
}
for (a in (totalNumber-leavesNumber):1) {
if (mareix[2*a,3] == mareix[2*a+1,3] && a <= (totalNumber-leavesNumber) && a > (totalNumber-1.5*leavesNumber)) {
list[[a]] <- Node$new(mareix[2*a,3])
} else {
list[[a]]$AddChildNode(list[[2*a]])
list[[a]]$AddChildNode(list[[2*a+1]])
}
}
#pdf("plots")
plot(list[[1]])
#dev.off()
library(data.tree)
mareix <- read.table("Downloads/datalevel4.txt")
mareix <- mareix[order(mareix[,1],decreasing=F),]
totalNumber <- nrow(mareix)
leavesNumber <- 0
for(i in 1:totalNumber) {
if (mareix[i,2] < 0) {
leavesNumber <- leavesNumber + 1
}
}
level <- log2(leavesNumber)
list <- list(Node$new(paste0("X",mareix[1,2]," < ",mareix[1,3])))
for (j in 2:(totalNumber-leavesNumber)) {
list[[j]] <- Node$new(paste0("X",mareix[j,2]," < ",mareix[j,3]))
}
for (k in (totalNumber-leavesNumber+1):totalNumber) {
list[[k]] <- Node$new(mareix[k,3])
}
for (a in (totalNumber-leavesNumber):1) {
if (mareix[2*a,3] == mareix[2*a+1,3] && a <= (totalNumber-leavesNumber) && a > (totalNumber-1.5*leavesNumber)) {
list[[a]] <- Node$new(mareix[2*a,3])
} else {
list[[a]]$AddChildNode(list[[2*a]])
list[[a]]$AddChildNode(list[[2*a+1]])
}
}
#pdf("plots")
plot(list[[1]])
#dev.off()
library(data.tree)
mareix <- read.table("Downloads/datalevel4.txt")
mareix <- mareix[order(mareix[,1],decreasing=F),]
totalNumber <- nrow(mareix)
leavesNumber <- 0
for(i in 1:totalNumber) {
if (mareix[i,2] < 0) {
leavesNumber <- leavesNumber + 1
}
}
level <- log2(leavesNumber)
list <- list(Node$new(paste0("X",mareix[1,2]," < ",mareix[1,3])))
for (j in 2:(totalNumber-leavesNumber)) {
list[[j]] <- Node$new(paste0("X",mareix[j,2]," < ",mareix[j,3]))
}
for (k in (totalNumber-leavesNumber+1):totalNumber) {
list[[k]] <- Node$new(mareix[k,3])
}
for (a in (totalNumber-leavesNumber):1) {
#if (mareix[2*a,3] == mareix[2*a+1,3] && a <= (totalNumber-leavesNumber) && a > (totalNumber-1.5*leavesNumber)) {
#  list[[a]] <- Node$new(mareix[2*a,3])
#} else {
list[[a]]$AddChildNode(list[[2*a]])
list[[a]]$AddChildNode(list[[2*a+1]])
#}
}
#pdf("plots")
plot(list[[1]])
#dev.off()
library(data.tree)
mareix <- read.table("Downloads/datalevel4.txt")
mareix <- mareix[order(mareix[,1],decreasing=F),]
totalNumber <- nrow(mareix)
leavesNumber <- 0
for(i in 1:totalNumber) {
if (mareix[i,2] < 0) {
leavesNumber <- leavesNumber + 1
}
}
level <- log2(leavesNumber)
list <- list(Node$new(paste0("X",mareix[1,2]," < ",mareix[1,3])))
for (j in 2:(totalNumber-leavesNumber)) {
list[[j]] <- Node$new(paste0("X",mareix[j,2]," < ",mareix[j,3]))
}
for (k in (totalNumber-leavesNumber+1):totalNumber) {
list[[k]] <- Node$new(mareix[k,3])
}
for (a in (totalNumber-leavesNumber):1) {
#if (mareix[2*a,3] == mareix[2*a+1,3] && a <= (totalNumber-leavesNumber) && a > (totalNumber-1.5*leavesNumber)) {
#  list[[a]] <- Node$new(mareix[2*a,3])
#} else {
list[[a]]$AddChildNode(list[[2*a]])
list[[a]]$AddChildNode(list[[2*a+1]])
#}
}
#pdf("plots")
plot(list[[1]])
#dev.off()
list[[1]]$Prune()
library(data.tree)
mareix <- read.table("Downloads/datalevel4.txt")
mareix <- mareix[order(mareix[,1],decreasing=F),]
totalNumber <- nrow(mareix)
leavesNumber <- 0
for(i in 1:totalNumber) {
if (mareix[i,2] < 0) {
leavesNumber <- leavesNumber + 1
}
}
level <- log2(leavesNumber)
list <- list(Node$new(paste0("X",mareix[1,2]," < ",mareix[1,3])))
for (j in 2:(totalNumber-leavesNumber)) {
list[[j]] <- Node$new(paste0("X",mareix[j,2]," < ",mareix[j,3]))
}
for (k in (totalNumber-leavesNumber+1):totalNumber) {
list[[k]] <- Node$new(mareix[k,3])
}
for (a in (totalNumber-leavesNumber):1) {
if (mareix[2*a,3] == mareix[2*a+1,3]) {
list[[a]] <- Node$new(mareix[2*a,3])
} else {
list[[a]]$AddChildNode(list[[2*a]])
list[[a]]$AddChildNode(list[[2*a+1]])
}
}
#pdf("plots")
plot(list[[1]])
#dev.off()
library(data.tree)
mareix <- read.table("Downloads/datalevel4.txt")
mareix <- mareix[order(mareix[,1],decreasing=F),]
totalNumber <- nrow(mareix)
leavesNumber <- 0
for(i in 1:totalNumber) {
if (mareix[i,2] < 0) {
leavesNumber <- leavesNumber + 1
}
}
level <- log2(leavesNumber)
list <- list(Node$new(paste0("X",mareix[1,2]," < ",mareix[1,3])))
for (j in 2:(totalNumber-leavesNumber)) {
list[[j]] <- Node$new(paste0("X",mareix[j,2]," < ",mareix[j,3]))
}
for (k in (totalNumber-leavesNumber+1):totalNumber) {
list[[k]] <- Node$new(mareix[k,3])
}
for (a in (totalNumber-leavesNumber):1) {
if (mareix[2*a,3] == mareix[2*a+1,3]) {
list[[a]] <- Node$new(mareix[2*a,3])
} else {
list[[a]]$AddChildNode(list[[2*a]])
list[[a]]$AddChildNode(list[[2*a+1]])
}
}
#pdf("plots")
plot(list[[1]])
#dev.off()
library(data.tree)
mareix <- read.table("Downloads/datalevel4.txt")
mareix <- mareix[order(mareix[,1],decreasing=F),]
totalNumber <- nrow(mareix)
leavesNumber <- 0
for(i in 1:totalNumber) {
if (mareix[i,2] < 0) {
leavesNumber <- leavesNumber + 1
}
}
level <- log2(leavesNumber)
list <- list(Node$new(paste0("X",mareix[1,2]," < ",mareix[1,3])))
for (j in 2:(totalNumber-leavesNumber)) {
list[[j]] <- Node$new(paste0("X",mareix[j,2]," < ",mareix[j,3]))
}
for (k in (totalNumber-leavesNumber+1):totalNumber) {
list[[k]] <- Node$new(mareix[k,3])
}
for (a in (totalNumber-leavesNumber):1) {
if (mareix[2*a,3] == mareix[2*a+1,3]) {
list[[a]] <- Node$new(mareix[2*a,3])
mareix[[a,3]] <- mareix[[2*a,3]]
} else {
list[[a]]$AddChildNode(list[[2*a]])
list[[a]]$AddChildNode(list[[2*a+1]])
}
}
#pdf("plots")
plot(list[[1]])
#dev.off()
library(data.tree)
mareix <- read.table("Downloads/datalevel4.txt")
mareix <- mareix[order(mareix[,1],decreasing=F),]
totalNumber <- nrow(mareix)
leavesNumber <- 0
for(i in 1:totalNumber) {
if (mareix[i,2] < 0) {
leavesNumber <- leavesNumber + 1
}
}
level <- log2(leavesNumber)
list <- list(Node$new(paste0("X",mareix[1,2]," < ",mareix[1,3])))
for (j in 2:(totalNumber-leavesNumber)) {
list[[j]] <- Node$new(paste0("X",mareix[j,2]," < ",mareix[j,3]))
}
for (k in (totalNumber-leavesNumber+1):totalNumber) {
list[[k]] <- Node$new(mareix[k,3])
}
for (a in (totalNumber-leavesNumber):1) {
if (mareix[2*a,3] == mareix[2*a+1,3]) {
list[[a]] <- Node$new(mareix[2*a,3])
mareix[[a,3]] <- mareix[[2*a,3]]
} else {
list[[a]]$AddChildNode(list[[2*a]])
list[[a]]$AddChildNode(list[[2*a+1]])
}
}
#pdf("plots")
plot(list[[1]])
#dev.off()
library(data.tree)
visualize_tree = function(dataFrame) {
matrix <- read.table("Downloads/datalevel4.txt")
#matrix <- dataFrame
matrix <- matrix[order(matrix[,1],decreasing=F),]
totalNumber <- nrow(matrix)
leavesNumber <- 0
for(i in 1:totalNumber) {
if (matrix[i,2] < 0) {
leavesNumber <- leavesNumber + 1
}
}
level <- log2(leavesNumber)
list <- list(Node$new(paste0("X",matrix[1,2]," < ",matrix[1,3])))
for (j in 2:(totalNumber-leavesNumber)) {
list[[j]] <- Node$new(paste0("X",matrix[j,2]," < ",matrix[j,3]))
}
for (k in (totalNumber-leavesNumber+1):totalNumber) {
list[[k]] <- Node$new(matrix[k,3])
}
for (a in (totalNumber-leavesNumber):1) {
if (matrix[2*a,3] == matrix[2*a+1,3]) {
list[[a]] <- Node$new(matrix[2*a,3])
matrix[[a,3]] <- matrix[[2*a,3]]
} else {
list[[a]]$AddChildNode(list[[2*a]])
list[[a]]$AddChildNode(list[[2*a+1]])
}
}
pdf("plots.pdf")
plot(list[[1]])
dev.off()
}
matrix[1,2]
matrix[[1,2]]
matrix
matrix <- read.table("Downloads/datalevel4.txt")
matrix[[1,1]]
matrix[1,1]
source("tree_visualization.R")
#test 1
data <- data.table("Downloads/datalevel4.txt")
compress(data)
source("Downloads/tree_visualization.R")
#test 1
data <- data.table("Downloads/datalevel4.txt")
compress(data)
source("Downloads/tree_visualization.R")
#test 1
data <- read.table("Downloads/datalevel4.txt")
compress(data)
data <- read.table("Downloads/datalevel4.txt")
visualize(true, data)
visualize(true, data)
visualize_basic(data)
visualize_basic(data)
source("Downloads.tree_visualization.R")
source("Downloads/tree_visualization.R")
visualize_basic(data)
visualize(true, data)
visualize(data, TRUE)
source("Downloads/tree_visualization.R")
visualize_basic(data)
as.integer(log2(15))
2^as.integer(log2(15))
source("Downloads/tree_visualization.R")
visualize(data, TRUE)
source("Downloads/tree_visualization.R")
visualize(data, TRUE)
source("Downloads/tree_visualization.R")
visualize(data, TRUE)
source("Downloads/tree_visualization.R")
visualize(data, TRUE)
source("Downloads/tree_visualization.R")
visualize(data, TRUE)
source("Downloads/tree_visualization.R")
visualize(data, TRUE)
source("Downloads/tree_visualization.R")
visualize(data, TRUE)
source("Downloads/tree_visualization.R")
visualize(data, TRUE)
source("Downloads/tree_visualization.R")
visualize(data, TRUE)
install.packages("DiagrammeRsvg")
library(DiagrammeR)
export_graph(ToDiagrammeRGraph(list[[1]]), "test.pdf")
install.packages("rsvg")
library(rsvg)
export_graph(ToDiagrammeRGraph(list[[1]]), "test.pdf")
source("Downloads/tree_visualization.R")
#test 1
data <- read.table("Downloads/datalevel4.txt")
visualize(data, TRUE)
visualize(data, FALSE)
visualize(data, FALSE, "new.pdf")
source("Downloads/tree_visualization.R")
visualize(data, FALSE, "new.pdf")
source("Downloads/tree_visualization.R")
#test 1
data <- read.table("Downloads/Completely_Pruned(I).txt")
compress(data)
visualize(data, FALSE, "new.pdf")
tree.origin = read.table(file = 'Downloads/tree1.txt')
tree.learnt = read.table(file = 'Downloads/tree2.txt')
feat.test = generate.random.feats(num = 5000,pdim = p.feature.dimension)
w1 = classify.via.tree(feat.df = feat.test,tree.df = tree.origin,tree.level = level.of.tree)
w2 = classify.via.tree(feat.df = feat.test,tree.df = tree.learnt,tree.level = level.of.tree)
cat(mean(w1==w2))
## Step 4  Visualization.
visualize(tree.origin, TRUE, "pruned_origin.pdf")
visualize(tree.origin, FALSE, "not_pruned_origin.pdf")
visualize(tree.learnt, TRUE, "pruned_learnt.pdf")
visualize(tree.learnt, FALSE, "not_pruned_learnt.pdf")
tree.origin = read.table(file = 'Downloads/tree1.txt')
getwd()
tree.origin = read.table(file = 'Downloads/pipeline/tree1.txt')
tree.learnt = read.table(file = 'Downloads/pipeline/tree2.txt')
feat.test = generate.random.feats(num = 5000,pdim = p.feature.dimension)
w1 = classify.via.tree(feat.df = feat.test,tree.df = tree.origin,tree.level = level.of.tree)
w2 = classify.via.tree(feat.df = feat.test,tree.df = tree.learnt,tree.level = level.of.tree)
cat(mean(w1==w2))
## Step 4  Visualization.
visualize(tree.origin, TRUE, "pruned_origin.pdf")
visualize(tree.origin, FALSE, "not_pruned_origin.pdf")
visualize(tree.learnt, TRUE, "pruned_learnt.pdf")
visualize(tree.learnt, FALSE, "not_pruned_learnt.pdf")
tree.origin = read.table(file = 'Downloads/pipeline/tree1.txt')
tree.learnt = read.table(file = 'Downloads/pipeline/tree2.txt')
feat.test = generate.random.feats(num = 5000,pdim = p.feature.dimension)
check_isEqual = function(x, y) {
is.matrix(x) && is.matrix(y) && dim(x) == dim(y) && all(x == y)
}
source("Downloads/tree_visualization.R")
#test 1
test_data <- read.table("Downloads/Completely_Pruned(I).txt")
true_data <- read.table("Downloads/Completely_Pruned(O).txt")
check_isEqual(compress(test_data), true_data)
compress(test_data)
true_data
is.matrix(test_data)
is.table(test_data)
is.data.frame(test_data)
identical(compress(test_data), true_data)
all.equal(compress(test_data), true_data)
is.data.frame(true_data)
table(compress(test_data) == true_data, useNA = 'ifany')
table(test_data == true_data, useNA = 'ifany')
check_isEqual(compress(test_data), true_data)
check_isEqual = function(x, y) {
table(x == y, useNA = 'ifany')
}
check_isEqual(compress(test_data), true_data)
test_data <- read.table("Downloads/Level_1_Pruned(I).txt")
true_data <- read.table("Downloads/Level_1_Pruned(O)txt")
check_isEqual(compress(test_data), true_data)
test_data4 <- read.table("Downloads/No_Need_For_Pruned(I).txt")
true_data4 <- read.table("Downloads/No_Need_For_Pruned(O).txt")
check_isEqual(compress(test_data4), true_data4)
test_data3 <- read.table("Downloads/Level_2_Pruned(I).txt")
true_data3 <- read.table("Downloads/Level_2_Pruned(O).txt")
check_isEqual(compress(test_data3), true_data3)
#test 2
test_data2 <- read.table("Downloads/Level_1_Pruned(I).txt")
true_data2 <- read.table("Downloads/Level_1_Pruned(O)txt")
check_isEqual(compress(test_data2), true_data2)
#test 2
test_data2 <- read.table("Downloads/Level_1_Pruned(I).txt")
true_data2 <- read.table("Downloads/Level_1_Pruned(O).txt")
check_isEqual(compress(test_data2), true_data2)
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
library(tidyr)
library(Rcpp)
install.packages("Rcpp")
install.packages("Rcpp")
install.packages(c("httpuv", "rpart.plot", "stringi", "yaml"))
install.packages(c("httpuv", "rpart.plot", "stringi", "yaml"))
install.packages(c("httpuv", "rpart.plot", "stringi", "yaml"))
install.packages("yaml")
libra
library(Rcpp)
cppFunction('int add(int x, int y, int z) {
int sum = x + y + z;
return sum;
}')
add
add(1,2,3)
// [[Rcpp::export]]
//[[Rcpp::export]]
source("Downloads/tree_visualization.R")
test_data4 <- read.table("Downloads/No_Need_For_Pruned(I).txt")
true_data4 <- read.table("Downloads/No_Need_For_Pruned(O).txt")
visualize(test_data4, TRUE, "sup.pdf")
visualize("Downloads/No_Need_For_Pruned(I).txt", TRUE, "sup.pdf")
library(Rcpp)
source("evaluation.r")
source("estimator_functions.R")
source("tree_visualization.R")
sourceCpp('caller1.cpp')
#install.packages("Rcpp")
## Step 0.5 Generate data.
num.sample <-1000
k.num.actions <- 3
p.feature.dimension <- 10
level.of.tree <- 2
feats=generate.random.feats(num = num.sample,pdim = p.feature.dimension)
tree=generate.random.treenodes(pdim = p.feature.dimension,klabel = k.num.actions,lev = level.of.tree)
actions=generate.actions(feats,k.num.actions)
#correct = classify.via.tree(feats,tree,level.of.tree)
rewards <- get.reward.via.feats.tree.action(feat.df = feats,tree.df = tree,tree.level = level.of.tree,actions.v = actions)
#rewards = as.numeric(actions==correct)
training.data <- data.frame(feats,actions,rewards)
write.table(training.data,file = 'training_data.txt',sep = ' ',col.names = FALSE,row.names = FALSE)
write.table(tree,file = 'tree1.txt',sep = ' ',col.names = FALSE,row.names = FALSE)
## Step 1  Read data.
#wr = read.table('input_wrs',sep = ' ')
#xx[ncol(xx)]=NULL
## Step 2  Run estimation.
est.rewatds <- calculate_Gamma(X = as.matrix(feats),Y = unlist(rewards),A = unlist(actions+1),d = k.num.actions,k = 5)
head(est.rewatds)
#write.table(est.rewatds,file = 'rewards_mat',sep = ' ',row.names = FALSE,col.names = FALSE)
#write.ftable(xx,file = 'feature_mat',sep = ' ',row.names = FALSE,col.names = FALSE)
## Step 3  Learn.
n = dim(feats)[1]
p = dim(feats)[2]
k = dim(est.rewatds)[2]
l = level.of.tree
f = 'feature_mat'
r = 'rewards_mat'
cat(n,p,k,l,'\n')
setwd('pipeline')
library(Rcpp)
source("evaluation.r")
source("estimator_functions.R")
source("tree_visualization.R")
sourceCpp('caller1.cpp')
#install.packages("Rcpp")
## Step 0.5 Generate data.
num.sample <-1000
k.num.actions <- 3
p.feature.dimension <- 10
level.of.tree <- 2
feats=generate.random.feats(num = num.sample,pdim = p.feature.dimension)
tree=generate.random.treenodes(pdim = p.feature.dimension,klabel = k.num.actions,lev = level.of.tree)
actions=generate.actions(feats,k.num.actions)
#correct = classify.via.tree(feats,tree,level.of.tree)
rewards <- get.reward.via.feats.tree.action(feat.df = feats,tree.df = tree,tree.level = level.of.tree,actions.v = actions)
#rewards = as.numeric(actions==correct)
training.data <- data.frame(feats,actions,rewards)
write.table(training.data,file = 'training_data.txt',sep = ' ',col.names = FALSE,row.names = FALSE)
write.table(tree,file = 'tree1.txt',sep = ' ',col.names = FALSE,row.names = FALSE)
## Step 1  Read data.
#wr = read.table('input_wrs',sep = ' ')
#xx[ncol(xx)]=NULL
## Step 2  Run estimation.
est.rewatds <- calculate_Gamma(X = as.matrix(feats),Y = unlist(rewards),A = unlist(actions+1),d = k.num.actions,k = 5)
head(est.rewatds)
#write.table(est.rewatds,file = 'rewards_mat',sep = ' ',row.names = FALSE,col.names = FALSE)
#write.ftable(xx,file = 'feature_mat',sep = ' ',row.names = FALSE,col.names = FALSE)
## Step 3  Learn.
n = dim(feats)[1]
p = dim(feats)[2]
k = dim(est.rewatds)[2]
l = level.of.tree
f = 'feature_mat'
r = 'rewards_mat'
cat(n,p,k,l,'\n')
caller(feats,est.rewatds,n,p,k,l,1)
sourceCpp('caller1.cpp')
caller(feats,est.rewatds,n,p,k,l,1)
sourceCpp('caller1.cpp')
sourceCpp('caller1.cpp')
caller(feats,est.rewatds,n,p,k,l,1)
